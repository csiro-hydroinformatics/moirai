Source: moirai
Priority: optional
Maintainer: Jean-Michel Perraud <per202@csiro.au>
Build-Depends: cmake,
               debhelper-compat (= 11)
Standards-Version: 4.5.0
Section: libs
Homepage: https://github.com/csiro-hydroinformatics/moirai
Vcs-Browser: https://github.com/csiro-hydroinformatics/moirai
#Vcs-Git: https://github.com/csiro-hydroinformatics/moirai.git
Rules-Requires-Root: no

Package: libmoirai-dev
Section: libdevel
Architecture: any
Multi-Arch: same
Depends: libmoirai (= ${binary:Version}), ${misc:Depends}
Conflicts: libmoirai-dev
Description: Manage C++ Objects's lifetime when exposed through a C API -- header files
 This C++ library is designed to help handling C++ objects from so called 
 opaque pointers, via a C API. Prominent features are: 
 .
 * Counting references via the C API to C++ domain objects (instead of 
 having to do so in each high-level language wrapper)
 * Handle C++ class inheritance even via opaque pointers
 * Mechanism for resilience to incorrect type casts when unwrapping 
 opaque pointers (i.e. get an exception, not a nasty crash...)
 * Thread-safe design
 .
 ANSI C code remains the most portable and least invasive way to access 
 libraries in a binary compatible manner across compilers, mainly due 
 to the incompatible name mangling schemes generated by C++ compilers.
 .
 This package contains the header files and compiler wrappers which are needed
 to compile and link programs against libmoirai.

Package: libmoirai
Architecture: any
Multi-Arch: same
Pre-Depends: ${misc:Pre-Depends}
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Manage C++ Objects's lifetime when exposed through a C API -- shared library
 This C++ library is designed to help handling C++ objects from so called 
 opaque pointers, via a C API. Prominent features are: 
 .
 * Counting references via the C API to C++ domain objects (instead of 
 having to do so in each high-level language wrapper)
 * Handle C++ class inheritance even via opaque pointers
 * Mechanism for resilience to incorrect type casts when unwrapping 
 opaque pointers (i.e. get an exception, not a nasty crash...)
 * Thread-safe design
 .
 ANSI C code remains the most portable and least invasive way to access 
 libraries in a binary compatible manner across compilers, mainly due 
 to the incompatible name mangling schemes generated by C++ compilers.
 .
 This package contains the Moirai shared libraries.
